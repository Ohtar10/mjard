package com.innova4j.maven.jar.deployer.xml;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.apache.log4j.BasicConfigurator;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.innova4j.maven.jar.deployer.util.TestConstants;
import com.innova4j.maven.jar.deployer.xml.domain.Model;


/**
 * The Class XMLGeneratorTest.
 * 
 * This class validates the operations of generating
 * the xml files of the maven repository.
 *
 * @author Luis Eduardo Ferro Diez - Innova4j
 */
public class XMLGeneratorTest {

	private JAXBContext jaxbContext;
	private XMLGenerator xmlGenerator;
	private String groupId = "com.oracle.adf";
	private String artifactId = "adf-faces";
	private String version = "11.1.1.7.0";
	private String packaging = "jar";
	private String modelVersion = "4.0.0";
	private String name = artifactId;
	private String description = "Generated by maven jar deployer.";
	
	@BeforeClass
	public static void beforeClass(){
		BasicConfigurator.configure();
	}
	
	@Before
	public void beforeMethod(){
		try {
			xmlGenerator = new DefaultXMLGenerator();
			jaxbContext = JAXBContext.newInstance(Model.class);
		} catch (JAXBException e) {
			fail(e.getMessage());
			e.printStackTrace();
		}
	}
	/**
	 * Test generate meta data for dependency success.
	 */
	@Test
	public void testGeneratePomDependencySuccess(){
		Path pom = Paths.get(System.getProperty("user.dir")+TestConstants.DUMMY_RESULT_PATH+"pom.xml");
		
		Model project = new Model();
		project.setGroupId(groupId);
		project.setArtifactId(artifactId);
		project.setVersion(version);
		project.setPackaging(packaging);
		project.setName(name);
		project.setDescription(description);
		project.setModelVersion(modelVersion);
		
		xmlGenerator.generateDependencyPom(project, pom);
		
		assertTrue(Files.exists(pom));
		try {
			Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
			Model projectSaved = ((JAXBElement<Model>) unmarshaller.unmarshal(pom.toFile())).getValue();
			assertEquals(groupId, projectSaved.getGroupId());
			assertEquals(artifactId, projectSaved.getArtifactId());
			assertEquals(version, projectSaved.getVersion());
			assertEquals(packaging, projectSaved.getPackaging());
			assertEquals(name, projectSaved.getName());
			assertEquals(description, projectSaved.getDescription());
			assertEquals(modelVersion, projectSaved.getModelVersion());
		} catch (JAXBException e) {
			fail(e.getMessage());
			e.printStackTrace();
		}finally{			
			try {
				Files.deleteIfExists(pom);
			} catch (IOException e) {
				fail(e.getMessage());
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Test generate dependency references.
	 */
	@Test
	public void testGenerateDependencyReferences(){
		
	}
	
	
}
